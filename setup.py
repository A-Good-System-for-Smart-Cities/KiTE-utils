import os
import re
import subprocess
from os.path import abspath, dirname, exists, join

from setuptools import find_packages, setup

setup_dir = dirname(abspath(__file__))
git_dir = join(setup_dir, ".git")
version_file = join(setup_dir, "version.py")
package_name = "KiTE"


def get_git_tag():
    try:
        git_tag = str(
            subprocess.check_output(
                ["git", "describe", "--exact-match", "--abbrev=0"],
                stderr=subprocess.STDOUT,
            )
        ).strip("'b\\n")
    except subprocess.CalledProcessError as exc_info:
        match = re.search(
            "fatal: no tag exactly matches '(?P<commit>[a-z0-9]+)'",
            str(exc_info.output),
        )
        if match:
            raise Exception(
                "Bailing: there is no git tag for the current commit, {commit}".format(
                    commit=match.group("commit")
                )
            )
        raise Exception(str(exc_info.output))

    return git_tag


# Automatically generate a version.py based on the git version
if exists(git_dir):
    proc = subprocess.run(
        ["git", "describe", "--exact-match", "--abbrev=0"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
    )
    # If there is no main branch, the commit count defaults to 0
    if proc.returncode:
        version_str = "0"
    else:
        version_str = proc.stdout.decode("utf-8")

    # Version number: <year>.<# commits on main>
    version = version_str.strip()
elif "KiTE-" in os.getcwd():
    version = os.getcwd().split("KiTE-")[1].strip()
else:
    version = "0"
if version != "0":
    # Create the version.py file
    with open(version_file, "w+") as fp:
        fp.write(f'# Autogenerated by setup.py\n__version__ = "{version}"')

if exists(version_file):
    with open(version_file, "r") as fp:
        exec(fp.read(), globals())
else:
    __version__ = "main"

with open(join(setup_dir, "README.md"), "r") as readme_file:
    long_description = readme_file.read()

setup(
    name=package_name,
    version=__version__,
    description="Utilities for validating and calibrating Supervised Learning models",
    long_description=long_description,
    long_description_content_type="text/markdown",
    author="A-Good-System-for-Smart-Cities",
    project_urls={
        "Source Code": "https://github.com/A-Good-System-for-Smart-Cities/KiTE-utils",
    },
    packages=find_packages(),
    include_package_data=True,
    zip_safe=True,
    setup_requires=["pytest-runner"],
    tests_require=["pytest"],
    install_requires=[
        "pandas>=1.4.3",
        "tqdm>=4.64.0",
        "decorator>=5.1.1",
        "joblib>=1.1.0",
        "kaleido>=0.2.1",
        "netcal>=1.2.1",
        "numpy>=1.23.2",
        "plotly>=5.10.0",
        "pytest>=7.1.2",
        "scikit_learn>=1.1.2",
        "scipy>=1.9.0",
    ],
    python_requires=">=3.8",
    license="MIT License",
    classifiers=[
        "Intended Audience :: Education",
        "Operating System :: OS Independent",
        "License :: OSI Approved :: MIT License",
        "Topic :: Scientific/Engineering",
        "Intended Audience :: Science/Research",
        "Programming Language :: Python :: 3",
    ],
)
